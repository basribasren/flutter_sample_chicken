import 'bloc/add_order_bloc.dart';import 'models/add_order_model.dart';import 'package:basri_s_application4/core/app_export.dart';import 'package:basri_s_application4/widgets/app_bar/appbar_leading_image.dart';import 'package:basri_s_application4/widgets/app_bar/appbar_title.dart';import 'package:basri_s_application4/widgets/app_bar/appbar_trailing_image.dart';import 'package:basri_s_application4/widgets/app_bar/custom_app_bar.dart';import 'package:basri_s_application4/widgets/custom_elevated_button.dart';import 'package:basri_s_application4/widgets/custom_icon_button.dart';import 'package:basri_s_application4/widgets/custom_switch.dart';import 'package:basri_s_application4/widgets/custom_text_form_field.dart';import 'package:flutter/material.dart';import 'package:basri_s_application4/presentation/add_order_two_dialog/add_order_two_dialog.dart';class AddOrderScreen extends StatelessWidget {const AddOrderScreen({Key? key}) : super(key: key);

static Widget builder(BuildContext context) { return BlocProvider<AddOrderBloc>(create: (context) => AddOrderBloc(AddOrderState(addOrderModelObj: AddOrderModel()))..add(AddOrderInitialEvent()), child: AddOrderScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, appBar: _buildAppBar(context), body: Container(width: double.maxFinite, padding: EdgeInsets.symmetric(horizontal: 16.h), child: Column(children: [_buildOrderButton(context), SizedBox(height: 18.v), _buildOrderDate(context), SizedBox(height: 15.v), _buildFeedTypeRow(context), SizedBox(height: 15.v), _buildFeedCompany(context), SizedBox(height: 14.v), _buildOrderWeight(context), SizedBox(height: 11.v), _buildBagQuantity(context), SizedBox(height: 14.v), _buildOrderPrice(context), SizedBox(height: 15.v), _buildOrderTotal(context), SizedBox(height: 19.v), Align(alignment: Alignment.centerLeft, child: Text("lbl_payment_method".tr, style: theme.textTheme.bodyMedium)), SizedBox(height: 12.v), Align(alignment: Alignment.centerLeft, child: Row(children: [Padding(padding: EdgeInsets.only(top: 3.v, bottom: 1.v), child: Text("lbl_cash".tr, style: theme.textTheme.bodyMedium)), BlocSelector<AddOrderBloc, AddOrderState, bool?>(selector: (state) => state.isSelectedSwitch, builder: (context, isSelectedSwitch) {return CustomSwitch(margin: EdgeInsets.only(left: 11.h), value: isSelectedSwitch, onChange: (value) {context.read<AddOrderBloc>().add(ChangeSwitchEvent(value: value));});}), Padding(padding: EdgeInsets.only(left: 11.h, top: 3.v, bottom: 1.v), child: Text("lbl_online".tr, style: CustomTextStyles.bodyMediumBlack900))])), SizedBox(height: 5.v)])), bottomNavigationBar: _buildPlaceOrderButton(context))); } 
/// Section Widget
PreferredSizeWidget _buildAppBar(BuildContext context) { return CustomAppBar(height: 54.v, leadingWidth: 37.h, leading: AppbarLeadingImage(imagePath: ImageConstant.imgArrow1, margin: EdgeInsets.only(left: 19.h, top: 19.v, bottom: 16.v), onTap: () {onTapArrowOne(context);}), title: AppbarTitle(text: "lbl_add_order".tr, margin: EdgeInsets.only(left: 26.h)), actions: [AppbarTrailingImage(imagePath: ImageConstant.imgDots1, margin: EdgeInsets.fromLTRB(16.h, 13.v, 16.h, 18.v))]); } 
/// Section Widget
Widget _buildOrderButton(BuildContext context) { return CustomElevatedButton(height: 30.v, width: 100.h, text: "lbl_order_no_124".tr, buttonTextStyle: CustomTextStyles.labelLargeOnPrimaryContainer, alignment: Alignment.centerLeft); } 
/// Section Widget
Widget _buildOrderDate(BuildContext context) { return BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.orderDateController, builder: (context, orderDateController) {return CustomTextFormField(controller: orderDateController, hintText: "lbl_date".tr, suffix: Container(margin: EdgeInsets.fromLTRB(30.h, 19.v, 21.h, 19.v), child: CustomImageView(imagePath: ImageConstant.imgVector, height: 18.v, width: 16.h)), suffixConstraints: BoxConstraints(maxHeight: 58.v), contentPadding: EdgeInsets.only(left: 21.h, top: 19.v, bottom: 19.v));}); } 
/// Section Widget
Widget _buildFeedType(BuildContext context) { return Expanded(child: BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.feedTypeController, builder: (context, feedTypeController) {return CustomTextFormField(controller: feedTypeController, hintText: "lbl_feed_type".tr, suffix: Container(margin: EdgeInsets.fromLTRB(30.h, 22.v, 16.h, 21.v), child: CustomImageView(imagePath: ImageConstant.imgMenu136, height: 16.adaptSize, width: 16.adaptSize)), suffixConstraints: BoxConstraints(maxHeight: 59.v), contentPadding: EdgeInsets.only(left: 21.h, top: 20.v, bottom: 20.v));})); } 
/// Section Widget
Widget _buildFeedTypeRow(BuildContext context) { return Row(mainAxisAlignment: MainAxisAlignment.center, children: [_buildFeedType(context), Padding(padding: EdgeInsets.only(left: 18.h), child: CustomIconButton(height: 59.adaptSize, width: 59.adaptSize, padding: EdgeInsets.all(15.h), decoration: IconButtonStyleHelper.fillPrimaryTL10, onTap: () {onTapBtnMaterialSymbolsAdd(context);}, child: CustomImageView(imagePath: ImageConstant.imgMaterialSymbolsAdd)))]); } 
/// Section Widget
Widget _buildFeedCompany(BuildContext context) { return BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.feedCompanyController, builder: (context, feedCompanyController) {return CustomTextFormField(controller: feedCompanyController, hintText: "lbl_feed_company".tr);}); } 
/// Section Widget
Widget _buildOrderWeight(BuildContext context) { return BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.orderWeightController, builder: (context, orderWeightController) {return CustomTextFormField(controller: orderWeightController, hintText: "lbl_50kg2".tr);}); } 
/// Section Widget
Widget _buildBagQuantity(BuildContext context) { return BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.bagQuantityController, builder: (context, bagQuantityController) {return CustomTextFormField(controller: bagQuantityController, hintText: "lbl_bag_quantity".tr);}); } 
/// Section Widget
Widget _buildOrderPrice(BuildContext context) { return BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.orderPriceController, builder: (context, orderPriceController) {return CustomTextFormField(controller: orderPriceController, hintText: "lbl_bag_price".tr);}); } 
/// Section Widget
Widget _buildOrderTotal(BuildContext context) { return BlocSelector<AddOrderBloc, AddOrderState, TextEditingController?>(selector: (state) => state.orderTotalController, builder: (context, orderTotalController) {return CustomTextFormField(controller: orderTotalController, hintText: "lbl_total".tr, textInputAction: TextInputAction.done);}); } 
/// Section Widget
Widget _buildPlaceOrderButton(BuildContext context) { return CustomElevatedButton(text: "lbl_place_order".tr, margin: EdgeInsets.only(left: 16.h, right: 16.h, bottom: 29.v), onPressed: () {onTapPlaceOrderButton(context);}); } 
/// Navigates to the myOrdersScreen when the action is triggered.
onTapArrowOne(BuildContext context) { NavigatorService.pushNamed(AppRoutes.myOrdersScreen, ); } 
/// Navigates to the feedTypeThreeScreen when the action is triggered.
onTapBtnMaterialSymbolsAdd(BuildContext context) { NavigatorService.pushNamed(AppRoutes.feedTypeThreeScreen, ); } 

/// Displays a dialog with the [AddOrderTwoDialog] content.
onTapPlaceOrderButton(BuildContext context) { showDialog(context: context, builder: (_) => AlertDialog(content: AddOrderTwoDialog.builder(context),backgroundColor: Colors.transparent, contentPadding: EdgeInsets.zero, insetPadding: const EdgeInsets.only(left: 0),)); } 
 }
